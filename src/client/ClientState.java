package client;import ocsf.client.*;import common.*;import java.io.*;import java.net.Socket;import java.util.StringTokenizer;import java.util.Vector;import javax.swing.JOptionPane;import DiceView.JoinFrame;import DiceView.LoginFrame;public class ClientState extends AbstractClient {	ChatIF clientUI;	private Socket clientSocket;			/**	 * The stream to handle data going to the server.	 */	private ObjectOutputStream output;	/**	 * The stream to handle data from the server.	 */	private ObjectInputStream input;	/**	 * The thread created to read data from the server.	 */	private Thread clientReader;	public String[] result; // [0]-점수, [1]-횟수, [2]-주사위1, [3]-주사위2	public String highScore;	public String loginSuccess;	public String getUserID() {		return userID;	}	public void setUserID(String userID) {		this.userID = userID;	}	String userID;	public ClientState(String host, int port, String login, ChatIF clientUI) {//생성자에서 연결 시키면서 "로그인 유저아이디를 보냈었네"		super(host, port); // Call the superclass constructor		this.clientUI = clientUI;		userID = login;		loginSuccess=new String();		result = new String[4];		for (int i = 0; i < 4; i++)			result[i] = new String("0");		try {			openConnection();			sendToServer("연결");		} catch (IOException e) { // 왜 발생하는거니			clientUI.display("Cannot open connection. Awaiting command."); 		}	}	public void handleMessageFromServer(Object msg){ ///// 서버한테 메세지 받기		if (msg.equals("로그인완료")) {			clientUI.display(msg.toString());			loginSuccess=(String)msg;		}		if (msg.equals("로그인불가")) {			clientUI.display(msg.toString());			JOptionPane.showConfirmDialog(null, "아이디와 비밀번호를 다시 확인해주세요.", "!", JOptionPane.CLOSED_OPTION,					JOptionPane.ERROR_MESSAGE);			// 텍스트필드 리셋			LoginFrame.getInstance().idTf.setText("");			LoginFrame.getInstance().passwdTf.setText("");		}		if (msg.equals("게임준비완료")) {			clientUI.display(msg.toString());		}		if (msg.equals("가입완료")) {			clientUI.display(msg.toString());			JOptionPane.showConfirmDialog(null, "가입이 완료되었습니다.", " ", JOptionPane.CLOSED_OPTION,						JOptionPane.INFORMATION_MESSAGE);			JoinFrame.getInstance().dispose(); //가입창 끄고 로그인해서 게임시작하기					}		if (msg.equals("가입불가")) {			clientUI.display(msg.toString());			JOptionPane.showConfirmDialog(null, "사용할 수 없는 아이디 입니다.", " ", JOptionPane.CLOSED_OPTION,					JOptionPane.ERROR_MESSAGE);								//텍스트 필드 리셋				JoinFrame.getInstance().joinIdTf.setText("");				JoinFrame.getInstance().joinPwTf.setText("");				JoinFrame.getInstance().joinNameTf.setText("");		}		if (((String) msg).startsWith("굴리기완료")) {			clientUI.display(msg.toString());			StringTokenizer st = new StringTokenizer((String) msg, " ");// ???????			st.nextToken();			result[0] = st.nextToken();			result[1] = st.nextToken();			result[2] = st.nextToken();			result[3] = st.nextToken();		}		if (((String) msg).startsWith("최고점수리스트")) {			System.out.println(msg);			StringTokenizer st = new StringTokenizer((String) msg, "@");// ???????			clientUI.display(st.nextToken());			highScore = st.nextToken();			clientUI.display(highScore);		}	}		public void handleMessageFromClientUI(String message) {// 클라이언트 프레임에서의 메세지		String[] values = message.split(" ");//공백으로 토큰쪼개기				String index = values[0];		// ========================================================================================		// 1.연결		/*		if (index.equals("연결") && !isConnected()) {			try {				openConnection();				System.out.println("연결성공????!!!!!!!!!!!!!!!!!!");			} catch (IOException e) {				clientUI.display("Cannot establish connection. Awaiting command.");				return;			}		}		*/		// 2.종료		if (message.startsWith("종료")) { //연결 끊기			//quit();			try {				closeConnection();			} catch (IOException e) {				clientUI.display("Cannot logoff normally. Terminating client.");				quit(); 			}			connectionClosed(false);			return;		}		// 3.로그인		else if (message.startsWith("로그인")) {			try {				clientUI.display(message);				sendToServer(message);			} catch (IOException e) {				// 			}		}		/*		else if(message.startsWith("연결")){			try {				sendToServer(message);			} catch (IOException e) {				// 			}		}		*/		// 4.로그아웃		else if (message.startsWith("로그아웃")) { //연결을 끊는거지			try {				closeConnection();			} catch (IOException e) {				clientUI.display("Cannot logoff normally. Terminating client.");				quit(); // ?오류인데 왜 끝내는겨???			}			connectionClosed(false);			return;		}		// ========================================================================================		// 4. 게임시작		else if (message.startsWith("게임시작")) {			try {				sendToServer(message);			} catch (IOException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}		}		// 5. 최고점수		else if (message.startsWith("최고점수")) {			try {				sendToServer(message);				// handleMessageFromServer(msg);			} catch (IOException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}		}		// ========================================================================================		// 7. 굴리기		else if (message.startsWith("굴리기")) {			try {				sendToServer(message);			} catch (IOException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}		}		// 8. 나가기		else if (message.startsWith("나가기")) {			try {				sendToServer(message);			} catch (IOException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}		}		else if (message.startsWith("가입")) {			try {				sendToServer(message);			} catch (IOException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}		}		else if(message.startsWith("게임종료")){			try {				sendToServer(message);			} catch (IOException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}		}		/*		// ========================================================================================		// ? 어디있는겨?		else if (message.startsWith("회원정보")) {			try {				sendToServer(message);			} catch (IOException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}		}		*/		// 그런 명령이 없대		else			clientUI.display("Invalid command.");	}	public void quit() { // 클라이언트 끝내는 메소드		try {			closeConnection();		} catch (IOException e) {		}		System.exit(0);	}	protected void connectionClosed(boolean isAbnormal) {		if (isAbnormal) // 이상하게 끊겼대 이건 어떤 경우????			clientUI.display("Abnormal termination of connection.");		else // 잘 끊겼대			clientUI.display("Connection closed.");	}	// protected void connectionEstablished() {	// 연결이 되었어 host와 port번호로	// clientUI.display("Connection established with " + getHost() + " on port "	// + getPort());	// }	/**	 * This method is called when an exception is detected in the method that	 * awaits input from the server.	 *	 * @param exception	 *            The exception thrown by the method.	 */	// protected void connectionException(Exception exception) { //?	// 연결예외?	// clientUI.display("Connection to server terminated.");	// }	public void reopenConnection(String host, int port) { // ?쓰는이유가 뭐야?		// 다시 열어 연결을?		if (isConnected())// 참이면 리턴			return;		// Create the sockets and the data streams		try {			clientSocket = new Socket(host, port);			output = new ObjectOutputStream(clientSocket.getOutputStream());			input = new ObjectInputStream(clientSocket.getInputStream());		} catch (IOException ex) {			// All three of the above must be closed when there is a failure			// to create any of them			quit();			clientUI.display("Cannot reconnection.");		}		clientReader = new Thread(this); // Create the data reader thread		connectionClosed(false);		clientReader.start(); // Start the thread	}}// End of ChatClient class